'use strict'

/* global Symbol, Promise */

const {eq} = require('./utils')
const fpx = require('../dist/fpx')
const {create} = Object

function id   (a) {return a}
function args ()  {return arguments}

eq(fpx.truthy(), Boolean(undefined))
eq(fpx.truthy(0), Boolean(0))
eq(fpx.truthy(''), Boolean(''))
eq(fpx.truthy(1), Boolean(1))

eq(fpx.falsy(), !undefined)
eq(fpx.falsy(0), !0)
eq(fpx.falsy(''), !'')
eq(fpx.falsy(1), !1)

eq(fpx.is(), true)
eq(fpx.is(NaN, NaN), true)
eq(fpx.is('one', 'one'), true)
eq(fpx.is('one', 'two'), false)
eq(fpx.is({}, {}), false)

eq(fpx.isNumber(), false)
eq(fpx.isNumber(1), true)
eq(fpx.isNumber(NaN), true)
eq(fpx.isNumber(Infinity), true)
eq(fpx.isNumber(null), false)
eq(fpx.isNumber('1'), false)
eq(fpx.isNumber([]), false)

eq(fpx.isFinite(), false)
eq(fpx.isFinite(1), true)
eq(fpx.isFinite(1.1), true)
eq(fpx.isFinite(-1.1), true)
eq(fpx.isFinite(NaN), false)
eq(fpx.isFinite(Infinity), false)
eq(fpx.isFinite(-Infinity), false)
eq(fpx.isFinite(null), false)
eq(fpx.isFinite('1'), false)
eq(fpx.isFinite([]), false)

eq(fpx.isInteger(), false)
eq(fpx.isInteger(0), true)
eq(fpx.isInteger(1), true)
eq(fpx.isInteger(10), true)
eq(fpx.isInteger(-1), true)
eq(fpx.isInteger(-10), true)
eq(fpx.isInteger(1.1), false)
eq(fpx.isInteger(-1.1), false)
eq(fpx.isInteger(NaN), false)
eq(fpx.isInteger(Infinity), false)
eq(fpx.isInteger(-Infinity), false)
eq(fpx.isInteger(null), false)
eq(fpx.isInteger('1'), false)
eq(fpx.isInteger([]), false)

eq(fpx.isNatural(), false)
eq(fpx.isNatural(0), true)
eq(fpx.isNatural(1), true)
eq(fpx.isNatural(10), true)
eq(fpx.isNatural(-1), false)
eq(fpx.isNatural(-10), false)
eq(fpx.isNatural(1.1), false)
eq(fpx.isNatural(-1.1), false)
eq(fpx.isNatural(NaN), false)
eq(fpx.isNatural(Infinity), false)
eq(fpx.isNatural(-Infinity), false)
eq(fpx.isNatural(null), false)
eq(fpx.isNatural('1'), false)
eq(fpx.isNatural([]), false)

eq(fpx.isNaN(), false)
eq(fpx.isNaN(NaN), true)
eq(fpx.isNaN(Infinity), false)
eq(fpx.isNaN(undefined), false)

eq(fpx.isInfinity(), false)
eq(fpx.isInfinity(Infinity), true)
eq(fpx.isInfinity(-Infinity), true)
eq(fpx.isInfinity(NaN), false)
eq(fpx.isInfinity(undefined), false)
eq(fpx.isInfinity(10), false)
eq(fpx.isInfinity(-10), false)
eq(fpx.isInfinity('Infinity'), false)
eq(fpx.isInfinity('-Infinity'), false)

eq(fpx.isString(), false)
eq(fpx.isString(''), true)

eq(fpx.isBoolean(), false)
eq(fpx.isBoolean(true), true)
eq(fpx.isBoolean(false), true)
eq(fpx.isBoolean(null), false)
eq(fpx.isBoolean(Boolean), false)

eq(fpx.isSymbol(), false)
eq(fpx.isSymbol(Symbol('blah')), true)
eq(fpx.isSymbol('Symbol(blah)'), false)

eq(fpx.isPrimitive(), true)
eq(fpx.isPrimitive(null), true)
eq(fpx.isPrimitive(1), true)
eq(fpx.isPrimitive(''), true)
eq(fpx.isPrimitive(Symbol()), true)
eq(fpx.isPrimitive(true), true)
eq(fpx.isPrimitive({}), false)
eq(fpx.isPrimitive([]), false)
eq(fpx.isPrimitive(id), false)
eq(fpx.isPrimitive(/!/), false)

eq(fpx.isComplex(), false)
eq(fpx.isComplex(null), false)
eq(fpx.isComplex(1), false)
eq(fpx.isComplex(''), false)
eq(fpx.isComplex(Symbol()), false)
eq(fpx.isComplex(true), false)
eq(fpx.isComplex({}), true)
eq(fpx.isComplex([]), true)
eq(fpx.isComplex(id), true)
eq(fpx.isComplex(/!/), true)

eq(fpx.isInstance(null, Object), false)
eq(fpx.isInstance([],   Object), true)
eq(fpx.isInstance(Object, Object), true)

eq(fpx.isFunction(), false)
eq(fpx.isFunction(id), true)
eq(fpx.isFunction(create(id)), false)

eq(fpx.isObject(), false)
eq(fpx.isObject(null), false)
eq(fpx.isObject(id), false)
eq(fpx.isObject({}), true)
eq(fpx.isObject([]), true)
eq(fpx.isObject(/!/), true)
eq(fpx.isObject(create(null)), true)
eq(fpx.isObject(create({})), true)

eq(fpx.isDict(), false)
eq(fpx.isDict(null), false)
eq(fpx.isDict(id), false)
eq(fpx.isDict({}), true)
eq(fpx.isDict([]), false)
eq(fpx.isDict(/!/), false)
eq(fpx.isDict(create(null)), true)
eq(fpx.isDict(create({})), false)

eq(fpx.isArray(), false)
eq(fpx.isArray([]), true)
eq(fpx.isArray(create([])), true)
eq(fpx.isArray(args(1, 2)), false)

eq(fpx.isList(), false)
eq(fpx.isList([]), true)
eq(fpx.isList(create([])), true)
eq(fpx.isList(args(1, 2)), true)
eq(fpx.isList({length: NaN}), false)

eq(fpx.isRegExp(), false)
eq(fpx.isRegExp(/!/), true)
eq(fpx.isRegExp(create(/!/)), true)
eq(fpx.isRegExp({}), false)

eq(fpx.isPromise(), false)
eq(fpx.isPromise({}), false)
eq(fpx.isPromise({then () {}}), false)
eq(fpx.isPromise(Promise.resolve()), true)
eq(fpx.isPromise({then () {}, catch () {}}), true)

eq(fpx.isDate(), false)
eq(fpx.isDate(new Date()), true)
eq(fpx.isDate(Date.now()), false)
eq(fpx.isDate(new Date().toString()), false)

eq(fpx.isValidDate(), false)
eq(fpx.isValidDate(new Date()), true)
eq(fpx.isValidDate(new Date(NaN)), false)

eq(fpx.isInvalidDate(), false)
eq(fpx.isInvalidDate(new Date()), false)
eq(fpx.isInvalidDate(new Date(NaN)), true)

eq(fpx.isNil(), true)
eq(fpx.isNil(null), true)
eq(fpx.isNil(false), false)

eq(fpx.testBy(1, id),           1)
eq(fpx.testBy(),                true)
eq(fpx.testBy(undefined, null), false)

eq(fpx.testBy('one', 'one'), true)
eq(fpx.testBy('one', 'two'), false)
eq(fpx.testBy('one', /one/), true)
eq(fpx.testBy('two', /one/), false)
eq(fpx.testBy(NaN, NaN),     true)
eq(fpx.testBy(NaN),          false)

eq(fpx.testBy([],      []),  true)
eq(fpx.testBy([1],     []),  true)
eq(fpx.testBy(args(1), []),  true)
eq(fpx.testBy({},      []),  false)
eq(fpx.testBy([],      [1]), false)
eq(fpx.testBy([1],     [1]), true)
eq(fpx.testBy(args(1), [1]), true)
eq(fpx.testBy({0: 1},  [1]), false)

eq(fpx.testBy({},        {}), true)
eq(fpx.testBy([1],       {}), true)
eq(fpx.testBy(undefined, {}), false)

eq(fpx.testBy({nan: NaN, one: 1}, {nan: Number.isNaN}), true)
eq(fpx.testBy({nan: 1}, {nan: Number.isNaN}), false)

eq(fpx.testBy(id, {length: 1}), true)
