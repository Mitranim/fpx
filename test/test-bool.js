'use strict'

/* global Symbol, Promise */

const {eq} = require('./utils')
const f = require('../dist/fpx')
const {create} = Object

function id(a) {return a}
function args() {return arguments}
function* gen() {}

eq(f.truthy(), Boolean(undefined))
eq(f.truthy(0), Boolean(0))
eq(f.truthy(''), Boolean(''))
eq(f.truthy(1), Boolean(1))

eq(f.falsy(), !undefined)
eq(f.falsy(0), !0)
eq(f.falsy(''), !'')
eq(f.falsy(1), !1)

eq(f.is(), true)
eq(f.is(NaN, NaN), true)
eq(f.is('one', 'one'), true)
eq(f.is('one', 'two'), false)
eq(f.is({}, {}), false)

eq(f.isNumber(), false)
eq(f.isNumber(1), true)
eq(f.isNumber(NaN), true)
eq(f.isNumber(Infinity), true)
eq(f.isNumber(null), false)
eq(f.isNumber('1'), false)
eq(f.isNumber([]), false)

eq(f.isFinite(), false)
eq(f.isFinite(1), true)
eq(f.isFinite(1.1), true)
eq(f.isFinite(-1.1), true)
eq(f.isFinite(NaN), false)
eq(f.isFinite(Infinity), false)
eq(f.isFinite(-Infinity), false)
eq(f.isFinite(null), false)
eq(f.isFinite('1'), false)
eq(f.isFinite([]), false)

eq(f.isInteger(), false)
eq(f.isInteger(0), true)
eq(f.isInteger(1), true)
eq(f.isInteger(10), true)
eq(f.isInteger(-1), true)
eq(f.isInteger(-10), true)
eq(f.isInteger(1.1), false)
eq(f.isInteger(-1.1), false)
eq(f.isInteger(NaN), false)
eq(f.isInteger(Infinity), false)
eq(f.isInteger(-Infinity), false)
eq(f.isInteger(null), false)
eq(f.isInteger('1'), false)
eq(f.isInteger([]), false)

eq(f.isNatural(), false)
eq(f.isNatural(0), true)
eq(f.isNatural(1), true)
eq(f.isNatural(10), true)
eq(f.isNatural(-1), false)
eq(f.isNatural(-10), false)
eq(f.isNatural(1.1), false)
eq(f.isNatural(-1.1), false)
eq(f.isNatural(NaN), false)
eq(f.isNatural(Infinity), false)
eq(f.isNatural(-Infinity), false)
eq(f.isNatural(null), false)
eq(f.isNatural('1'), false)
eq(f.isNatural([]), false)

eq(f.isNaN(), false)
eq(f.isNaN(NaN), true)
eq(f.isNaN(Infinity), false)
eq(f.isNaN(undefined), false)

eq(f.isInfinity(), false)
eq(f.isInfinity(Infinity), true)
eq(f.isInfinity(-Infinity), true)
eq(f.isInfinity(NaN), false)
eq(f.isInfinity(undefined), false)
eq(f.isInfinity(10), false)
eq(f.isInfinity(-10), false)
eq(f.isInfinity('Infinity'), false)
eq(f.isInfinity('-Infinity'), false)

eq(f.isString(), false)
eq(f.isString(''), true)

eq(f.isBoolean(), false)
eq(f.isBoolean(true), true)
eq(f.isBoolean(false), true)
eq(f.isBoolean(null), false)
eq(f.isBoolean(Boolean), false)

eq(f.isSymbol(), false)
eq(f.isSymbol(Symbol('blah')), true)
eq(f.isSymbol('Symbol(blah)'), false)

eq(f.isPrimitive(), true)
eq(f.isPrimitive(null), true)
eq(f.isPrimitive(1), true)
eq(f.isPrimitive(''), true)
eq(f.isPrimitive(Symbol()), true)
eq(f.isPrimitive(true), true)
eq(f.isPrimitive({}), false)
eq(f.isPrimitive([]), false)
eq(f.isPrimitive(id), false)
eq(f.isPrimitive(/!/), false)

eq(f.isComplex(), false)
eq(f.isComplex(null), false)
eq(f.isComplex(1), false)
eq(f.isComplex(''), false)
eq(f.isComplex(Symbol()), false)
eq(f.isComplex(true), false)
eq(f.isComplex({}), true)
eq(f.isComplex([]), true)
eq(f.isComplex(id), true)
eq(f.isComplex(/!/), true)

eq(f.isInstance(null, Object), false)
eq(f.isInstance([],   Object), true)
eq(f.isInstance(Object, Object), true)

eq(f.isFunction(), false)
eq(f.isFunction(id), true)
eq(f.isFunction(create(id)), false)

eq(f.isObject(), false)
eq(f.isObject(null), false)
eq(f.isObject(id), false)
eq(f.isObject({}), true)
eq(f.isObject([]), true)
eq(f.isObject(/!/), true)
eq(f.isObject(create(null)), true)
eq(f.isObject(create({})), true)

eq(f.isDict(), false)
eq(f.isDict(null), false)
eq(f.isDict(id), false)
eq(f.isDict({}), true)
eq(f.isDict([]), false)
eq(f.isDict(/!/), false)
eq(f.isDict(create(null)), true)
eq(f.isDict(create({})), false)

eq(f.isArray(), false)
eq(f.isArray([]), true)
eq(f.isArray(create([])), true)
eq(f.isArray(args(1, 2)), false)

eq(f.isList(), false)
eq(f.isList([]), true)
eq(f.isList(create([])), true)
eq(f.isList(args(1, 2)), true)
eq(f.isList({length: NaN}), false)

eq(f.isRegExp(), false)
eq(f.isRegExp(/!/), true)
eq(f.isRegExp(create(/!/)), true)
eq(f.isRegExp({}), false)

eq(f.isPromise(), false)
eq(f.isPromise({}), false)
eq(f.isPromise({then () {}}), false)
eq(f.isPromise(Promise.resolve()), true)
eq(f.isPromise({then () {}, catch () {}}), true)

eq(f.isIterator(), false)
eq(f.isIterator(gen), false)
eq(f.isIterator(gen()), true)

eq(f.isDate(), false)
eq(f.isDate(new Date()), true)
eq(f.isDate(Date.now()), false)
eq(f.isDate(new Date().toString()), false)

eq(f.isValidDate(), false)
eq(f.isValidDate(new Date()), true)
eq(f.isValidDate(new Date(NaN)), false)

eq(f.isInvalidDate(), false)
eq(f.isInvalidDate(new Date()), false)
eq(f.isInvalidDate(new Date(NaN)), true)

eq(f.isNil(), true)
eq(f.isNil(null), true)
eq(f.isNil(false), false)

eq(f.testBy(1, id),           1)
eq(f.testBy(),                true)
eq(f.testBy(undefined, null), false)

eq(f.testBy('one', 'one'), true)
eq(f.testBy('one', 'two'), false)
eq(f.testBy('one', /one/), true)
eq(f.testBy('two', /one/), false)
eq(f.testBy(NaN, NaN),     true)
eq(f.testBy(NaN),          false)

eq(f.testBy([],      []),  true)
eq(f.testBy([1],     []),  true)
eq(f.testBy(args(1), []),  true)
eq(f.testBy({},      []),  false)
eq(f.testBy([],      [1]), false)
eq(f.testBy([1],     [1]), true)
eq(f.testBy(args(1), [1]), true)
eq(f.testBy({0: 1},  [1]), false)

eq(f.testBy({},        {}), true)
eq(f.testBy([1],       {}), true)
eq(f.testBy(undefined, {}), false)

eq(f.testBy({nan: NaN, one: 1}, {nan: Number.isNaN}), true)
eq(f.testBy({nan: 1}, {nan: Number.isNaN}), false)

eq(f.testBy(id, {length: 1}), true)
